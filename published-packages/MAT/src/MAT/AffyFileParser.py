# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AffyFileParser', [dirname(__file__)])
        except ImportError:
            import _AffyFileParser
            return _AffyFileParser
        if fp is not None:
            try:
                _mod = imp.load_module('_AffyFileParser', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AffyFileParser = swig_import_helper()
    del swig_import_helper
else:
    import _AffyFileParser
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AffyFileParser.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _AffyFileParser.SwigPyIterator_value(self)
    def incr(self, n=1): return _AffyFileParser.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _AffyFileParser.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _AffyFileParser.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _AffyFileParser.SwigPyIterator_equal(self, *args)
    def copy(self): return _AffyFileParser.SwigPyIterator_copy(self)
    def next(self): return _AffyFileParser.SwigPyIterator_next(self)
    def __next__(self): return _AffyFileParser.SwigPyIterator___next__(self)
    def previous(self): return _AffyFileParser.SwigPyIterator_previous(self)
    def advance(self, *args): return _AffyFileParser.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _AffyFileParser.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _AffyFileParser.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _AffyFileParser.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _AffyFileParser.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _AffyFileParser.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _AffyFileParser.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _AffyFileParser.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

_AFFY_BASE_TYPE_H = _AffyFileParser._AFFY_BASE_TYPE_H
class IntervalEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seq"] = _AffyFileParser.IntervalEntry_seq_set
    __swig_getmethods__["seq"] = _AffyFileParser.IntervalEntry_seq_get
    if _newclass:seq = _swig_property(_AffyFileParser.IntervalEntry_seq_get, _AffyFileParser.IntervalEntry_seq_set)
    __swig_setmethods__["probeSetName"] = _AffyFileParser.IntervalEntry_probeSetName_set
    __swig_getmethods__["probeSetName"] = _AffyFileParser.IntervalEntry_probeSetName_get
    if _newclass:probeSetName = _swig_property(_AffyFileParser.IntervalEntry_probeSetName_get, _AffyFileParser.IntervalEntry_probeSetName_set)
    __swig_setmethods__["start"] = _AffyFileParser.IntervalEntry_start_set
    __swig_getmethods__["start"] = _AffyFileParser.IntervalEntry_start_get
    if _newclass:start = _swig_property(_AffyFileParser.IntervalEntry_start_get, _AffyFileParser.IntervalEntry_start_set)
    __swig_setmethods__["stop"] = _AffyFileParser.IntervalEntry_stop_set
    __swig_getmethods__["stop"] = _AffyFileParser.IntervalEntry_stop_get
    if _newclass:stop = _swig_property(_AffyFileParser.IntervalEntry_stop_get, _AffyFileParser.IntervalEntry_stop_set)
    __swig_setmethods__["overlap"] = _AffyFileParser.IntervalEntry_overlap_set
    __swig_getmethods__["overlap"] = _AffyFileParser.IntervalEntry_overlap_get
    if _newclass:overlap = _swig_property(_AffyFileParser.IntervalEntry_overlap_get, _AffyFileParser.IntervalEntry_overlap_set)
    __swig_setmethods__["strand"] = _AffyFileParser.IntervalEntry_strand_set
    __swig_getmethods__["strand"] = _AffyFileParser.IntervalEntry_strand_get
    if _newclass:strand = _swig_property(_AffyFileParser.IntervalEntry_strand_get, _AffyFileParser.IntervalEntry_strand_set)
    def size(self): return _AffyFileParser.IntervalEntry_size(self)
    def __init__(self): 
        this = _AffyFileParser.new_IntervalEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_IntervalEntry
    __del__ = lambda self : None;
IntervalEntry_swigregister = _AffyFileParser.IntervalEntry_swigregister
IntervalEntry_swigregister(IntervalEntry)

class TagValuePairType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagValuePairType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TagValuePairType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Tag"] = _AffyFileParser.TagValuePairType_Tag_set
    __swig_getmethods__["Tag"] = _AffyFileParser.TagValuePairType_Tag_get
    if _newclass:Tag = _swig_property(_AffyFileParser.TagValuePairType_Tag_get, _AffyFileParser.TagValuePairType_Tag_set)
    __swig_setmethods__["Value"] = _AffyFileParser.TagValuePairType_Value_set
    __swig_getmethods__["Value"] = _AffyFileParser.TagValuePairType_Value_get
    if _newclass:Value = _swig_property(_AffyFileParser.TagValuePairType_Value_get, _AffyFileParser.TagValuePairType_Value_set)
    def __eq__(self, *args): return _AffyFileParser.TagValuePairType___eq__(self, *args)
    def __init__(self): 
        this = _AffyFileParser.new_TagValuePairType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_TagValuePairType
    __del__ = lambda self : None;
TagValuePairType_swigregister = _AffyFileParser.TagValuePairType_swigregister
TagValuePairType_swigregister(TagValuePairType)

MAX_PROBE_SET_NAME_LENGTH = _AffyFileParser.MAX_PROBE_SET_NAME_LENGTH
class CCDFFileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFFileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFFileHeader, name)
    __repr__ = _swig_repr
    def GetCols(self): return _AffyFileParser.CCDFFileHeader_GetCols(self)
    def GetRows(self): return _AffyFileParser.CCDFFileHeader_GetRows(self)
    def GetNumProbeSets(self): return _AffyFileParser.CCDFFileHeader_GetNumProbeSets(self)
    def GetNumQCProbeSets(self): return _AffyFileParser.CCDFFileHeader_GetNumQCProbeSets(self)
    def GetReference(self): return _AffyFileParser.CCDFFileHeader_GetReference(self)
    def __init__(self): 
        this = _AffyFileParser.new_CCDFFileHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFFileHeader
    __del__ = lambda self : None;
CCDFFileHeader_swigregister = _AffyFileParser.CCDFFileHeader_swigregister
CCDFFileHeader_swigregister(CCDFFileHeader)

UnknownProbeSetType = _AffyFileParser.UnknownProbeSetType
ExpressionProbeSetType = _AffyFileParser.ExpressionProbeSetType
GenotypingProbeSetType = _AffyFileParser.GenotypingProbeSetType
ResequencingProbeSetType = _AffyFileParser.ResequencingProbeSetType
TagProbeSetType = _AffyFileParser.TagProbeSetType
NoDirection = _AffyFileParser.NoDirection
SenseDirection = _AffyFileParser.SenseDirection
AntiSenseDirection = _AffyFileParser.AntiSenseDirection
class CCDFProbeInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFProbeInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFProbeInformation, name)
    __repr__ = _swig_repr
    def GetListIndex(self): return _AffyFileParser.CCDFProbeInformation_GetListIndex(self)
    def GetExpos(self): return _AffyFileParser.CCDFProbeInformation_GetExpos(self)
    def GetX(self): return _AffyFileParser.CCDFProbeInformation_GetX(self)
    def GetY(self): return _AffyFileParser.CCDFProbeInformation_GetY(self)
    def GetPBase(self): return _AffyFileParser.CCDFProbeInformation_GetPBase(self)
    def GetTBase(self): return _AffyFileParser.CCDFProbeInformation_GetTBase(self)
    def __init__(self): 
        this = _AffyFileParser.new_CCDFProbeInformation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFProbeInformation
    __del__ = lambda self : None;
CCDFProbeInformation_swigregister = _AffyFileParser.CCDFProbeInformation_swigregister
CCDFProbeInformation_swigregister(CCDFProbeInformation)

PROBE_SIZE = _AffyFileParser.PROBE_SIZE
class CCDFProbeGroupInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFProbeGroupInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFProbeGroupInformation, name)
    __repr__ = _swig_repr
    def GetDirection(self): return _AffyFileParser.CCDFProbeGroupInformation_GetDirection(self)
    def GetNumLists(self): return _AffyFileParser.CCDFProbeGroupInformation_GetNumLists(self)
    def GetNumCells(self): return _AffyFileParser.CCDFProbeGroupInformation_GetNumCells(self)
    def GetNumCellsPerList(self): return _AffyFileParser.CCDFProbeGroupInformation_GetNumCellsPerList(self)
    def GetStart(self): return _AffyFileParser.CCDFProbeGroupInformation_GetStart(self)
    def GetStop(self): return _AffyFileParser.CCDFProbeGroupInformation_GetStop(self)
    def GetName(self): return _AffyFileParser.CCDFProbeGroupInformation_GetName(self)
    def GetCell(self, *args): return _AffyFileParser.CCDFProbeGroupInformation_GetCell(self, *args)
    def __init__(self): 
        this = _AffyFileParser.new_CCDFProbeGroupInformation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFProbeGroupInformation
    __del__ = lambda self : None;
CCDFProbeGroupInformation_swigregister = _AffyFileParser.CCDFProbeGroupInformation_swigregister
CCDFProbeGroupInformation_swigregister(CCDFProbeGroupInformation)

PROBE_GROUP_SIZE = _AffyFileParser.PROBE_GROUP_SIZE
class CCDFProbeSetInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFProbeSetInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFProbeSetInformation, name)
    __repr__ = _swig_repr
    def GetProbeSetType(self): return _AffyFileParser.CCDFProbeSetInformation_GetProbeSetType(self)
    def GetDirection(self): return _AffyFileParser.CCDFProbeSetInformation_GetDirection(self)
    def GetNumLists(self): return _AffyFileParser.CCDFProbeSetInformation_GetNumLists(self)
    def GetNumGroups(self): return _AffyFileParser.CCDFProbeSetInformation_GetNumGroups(self)
    def GetNumCells(self): return _AffyFileParser.CCDFProbeSetInformation_GetNumCells(self)
    def GetNumCellsPerList(self): return _AffyFileParser.CCDFProbeSetInformation_GetNumCellsPerList(self)
    def GetProbeSetNumber(self): return _AffyFileParser.CCDFProbeSetInformation_GetProbeSetNumber(self)
    def GetGroupInformation(self, *args): return _AffyFileParser.CCDFProbeSetInformation_GetGroupInformation(self, *args)
    def __init__(self): 
        this = _AffyFileParser.new_CCDFProbeSetInformation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFProbeSetInformation
    __del__ = lambda self : None;
CCDFProbeSetInformation_swigregister = _AffyFileParser.CCDFProbeSetInformation_swigregister
CCDFProbeSetInformation_swigregister(CCDFProbeSetInformation)

PROBE_SET_SIZE = _AffyFileParser.PROBE_SET_SIZE
class CCDFProbeSetNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFProbeSetNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFProbeSetNames, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CCDFProbeSetNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFProbeSetNames
    __del__ = lambda self : None;
    def Clear(self): return _AffyFileParser.CCDFProbeSetNames_Clear(self)
    def GetName(self, *args): return _AffyFileParser.CCDFProbeSetNames_GetName(self, *args)
CCDFProbeSetNames_swigregister = _AffyFileParser.CCDFProbeSetNames_swigregister
CCDFProbeSetNames_swigregister(CCDFProbeSetNames)

class CCDFQCProbeInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFQCProbeInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFQCProbeInformation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CCDFQCProbeInformation()
        try: self.this.append(this)
        except: self.this = this
    def GetX(self): return _AffyFileParser.CCDFQCProbeInformation_GetX(self)
    def GetY(self): return _AffyFileParser.CCDFQCProbeInformation_GetY(self)
    def GetPLen(self): return _AffyFileParser.CCDFQCProbeInformation_GetPLen(self)
    def IsPerfectMatchProbe(self): return _AffyFileParser.CCDFQCProbeInformation_IsPerfectMatchProbe(self)
    def IsBackgroundProbe(self): return _AffyFileParser.CCDFQCProbeInformation_IsBackgroundProbe(self)
    __swig_destroy__ = _AffyFileParser.delete_CCDFQCProbeInformation
    __del__ = lambda self : None;
CCDFQCProbeInformation_swigregister = _AffyFileParser.CCDFQCProbeInformation_swigregister
CCDFQCProbeInformation_swigregister(CCDFQCProbeInformation)

QC_PROBE_SIZE = _AffyFileParser.QC_PROBE_SIZE
UnknownQCProbeSetType = _AffyFileParser.UnknownQCProbeSetType
CheckerboardNegativeQCProbeSetType = _AffyFileParser.CheckerboardNegativeQCProbeSetType
CheckerboardPositiveQCProbeSetType = _AffyFileParser.CheckerboardPositiveQCProbeSetType
HybNegativeQCProbeSetType = _AffyFileParser.HybNegativeQCProbeSetType
HybPositiveQCProbeSetType = _AffyFileParser.HybPositiveQCProbeSetType
TextFeaturesNegativeQCProbeSetType = _AffyFileParser.TextFeaturesNegativeQCProbeSetType
TextFeaturesPositiveQCProbeSetType = _AffyFileParser.TextFeaturesPositiveQCProbeSetType
CentralNegativeQCProbeSetType = _AffyFileParser.CentralNegativeQCProbeSetType
CentralPositiveQCProbeSetType = _AffyFileParser.CentralPositiveQCProbeSetType
GeneExpNegativeQCProbeSetType = _AffyFileParser.GeneExpNegativeQCProbeSetType
GeneExpPositiveQCProbeSetType = _AffyFileParser.GeneExpPositiveQCProbeSetType
CycleFidelityNegativeQCProbeSetType = _AffyFileParser.CycleFidelityNegativeQCProbeSetType
CycleFidelityPositiveQCProbeSetType = _AffyFileParser.CycleFidelityPositiveQCProbeSetType
CentralCrossNegativeQCProbeSetType = _AffyFileParser.CentralCrossNegativeQCProbeSetType
CentralCrossPositiveQCProbeSetType = _AffyFileParser.CentralCrossPositiveQCProbeSetType
CrossHybNegativeQCProbeSetType = _AffyFileParser.CrossHybNegativeQCProbeSetType
CrossHybPositiveQCProbeSetType = _AffyFileParser.CrossHybPositiveQCProbeSetType
SpatialNormalizationNegativeQCProbeSetType = _AffyFileParser.SpatialNormalizationNegativeQCProbeSetType
SpatialNormalizationPositiveQCProbeSetType = _AffyFileParser.SpatialNormalizationPositiveQCProbeSetType
class CCDFQCProbeSetInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFQCProbeSetInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFQCProbeSetInformation, name)
    __repr__ = _swig_repr
    def GetQCProbeSetType(self): return _AffyFileParser.CCDFQCProbeSetInformation_GetQCProbeSetType(self)
    def GetNumCells(self): return _AffyFileParser.CCDFQCProbeSetInformation_GetNumCells(self)
    def GetProbeInformation(self, *args): return _AffyFileParser.CCDFQCProbeSetInformation_GetProbeInformation(self, *args)
    def __init__(self): 
        this = _AffyFileParser.new_CCDFQCProbeSetInformation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFQCProbeSetInformation
    __del__ = lambda self : None;
CCDFQCProbeSetInformation_swigregister = _AffyFileParser.CCDFQCProbeSetInformation_swigregister
CCDFQCProbeSetInformation_swigregister(CCDFQCProbeSetInformation)

QC_PROBE_SET_SIZE = _AffyFileParser.QC_PROBE_SET_SIZE
class CCDFFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCDFFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCDFFileData, name)
    __repr__ = _swig_repr
    def SetFileName(self, *args): return _AffyFileParser.CCDFFileData_SetFileName(self, *args)
    def GetFileName(self): return _AffyFileParser.CCDFFileData_GetFileName(self)
    def GetHeader(self): return _AffyFileParser.CCDFFileData_GetHeader(self)
    def GetError(self): return _AffyFileParser.CCDFFileData_GetError(self)
    def GetProbeSetName(self, *args): return _AffyFileParser.CCDFFileData_GetProbeSetName(self, *args)
    def GetChipType(self): return _AffyFileParser.CCDFFileData_GetChipType(self)
    def Read(self): return _AffyFileParser.CCDFFileData_Read(self)
    def ReadHeader(self): return _AffyFileParser.CCDFFileData_ReadHeader(self)
    def Exists(self): return _AffyFileParser.CCDFFileData_Exists(self)
    def Close(self): return _AffyFileParser.CCDFFileData_Close(self)
    def IsXDACompatibleFile(self): return _AffyFileParser.CCDFFileData_IsXDACompatibleFile(self)
    def GetProbeSetType(self, *args): return _AffyFileParser.CCDFFileData_GetProbeSetType(self, *args)
    def GetProbeSetInformation(self, *args): return _AffyFileParser.CCDFFileData_GetProbeSetInformation(self, *args)
    def GetQCProbeSetInformation(self, *args): return _AffyFileParser.CCDFFileData_GetQCProbeSetInformation(self, *args)
    def GetQCProbeSetInformation_By_Type(self, *args): return _AffyFileParser.CCDFFileData_GetQCProbeSetInformation_By_Type(self, *args)
    def __init__(self): 
        this = _AffyFileParser.new_CCDFFileData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCDFFileData
    __del__ = lambda self : None;
CCDFFileData_swigregister = _AffyFileParser.CCDFFileData_swigregister
CCDFFileData_swigregister(CCDFFileData)

class BackgroundZoneType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackgroundZoneType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackgroundZoneType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["centerx"] = _AffyFileParser.BackgroundZoneType_centerx_set
    __swig_getmethods__["centerx"] = _AffyFileParser.BackgroundZoneType_centerx_get
    if _newclass:centerx = _swig_property(_AffyFileParser.BackgroundZoneType_centerx_get, _AffyFileParser.BackgroundZoneType_centerx_set)
    __swig_setmethods__["centery"] = _AffyFileParser.BackgroundZoneType_centery_set
    __swig_getmethods__["centery"] = _AffyFileParser.BackgroundZoneType_centery_get
    if _newclass:centery = _swig_property(_AffyFileParser.BackgroundZoneType_centery_get, _AffyFileParser.BackgroundZoneType_centery_set)
    __swig_setmethods__["background"] = _AffyFileParser.BackgroundZoneType_background_set
    __swig_getmethods__["background"] = _AffyFileParser.BackgroundZoneType_background_get
    if _newclass:background = _swig_property(_AffyFileParser.BackgroundZoneType_background_get, _AffyFileParser.BackgroundZoneType_background_set)
    def __init__(self): 
        this = _AffyFileParser.new_BackgroundZoneType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BackgroundZoneType
    __del__ = lambda self : None;
BackgroundZoneType_swigregister = _AffyFileParser.BackgroundZoneType_swigregister
BackgroundZoneType_swigregister(BackgroundZoneType)

class BackgroundZoneInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackgroundZoneInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackgroundZoneInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["number_zones"] = _AffyFileParser.BackgroundZoneInfo_number_zones_set
    __swig_getmethods__["number_zones"] = _AffyFileParser.BackgroundZoneInfo_number_zones_get
    if _newclass:number_zones = _swig_property(_AffyFileParser.BackgroundZoneInfo_number_zones_get, _AffyFileParser.BackgroundZoneInfo_number_zones_set)
    __swig_setmethods__["smooth_factor"] = _AffyFileParser.BackgroundZoneInfo_smooth_factor_set
    __swig_getmethods__["smooth_factor"] = _AffyFileParser.BackgroundZoneInfo_smooth_factor_get
    if _newclass:smooth_factor = _swig_property(_AffyFileParser.BackgroundZoneInfo_smooth_factor_get, _AffyFileParser.BackgroundZoneInfo_smooth_factor_set)
    __swig_setmethods__["zones"] = _AffyFileParser.BackgroundZoneInfo_zones_set
    __swig_getmethods__["zones"] = _AffyFileParser.BackgroundZoneInfo_zones_get
    if _newclass:zones = _swig_property(_AffyFileParser.BackgroundZoneInfo_zones_get, _AffyFileParser.BackgroundZoneInfo_zones_set)
    def __init__(self): 
        this = _AffyFileParser.new_BackgroundZoneInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BackgroundZoneInfo
    __del__ = lambda self : None;
BackgroundZoneInfo_swigregister = _AffyFileParser.BackgroundZoneInfo_swigregister
BackgroundZoneInfo_swigregister(BackgroundZoneInfo)

class CCHPFileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCHPFileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCHPFileHeader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CCHPFileHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCHPFileHeader
    __del__ = lambda self : None;
    Expression = _AffyFileParser.CCHPFileHeader_Expression
    Genotyping = _AffyFileParser.CCHPFileHeader_Genotyping
    Resequencing = _AffyFileParser.CCHPFileHeader_Resequencing
    Universal = _AffyFileParser.CCHPFileHeader_Universal
    Unknown = _AffyFileParser.CCHPFileHeader_Unknown
    def GetCols(self): return _AffyFileParser.CCHPFileHeader_GetCols(self)
    def GetRows(self): return _AffyFileParser.CCHPFileHeader_GetRows(self)
    def GetNumProbeSets(self): return _AffyFileParser.CCHPFileHeader_GetNumProbeSets(self)
    def GetAssayType(self): return _AffyFileParser.CCHPFileHeader_GetAssayType(self)
    def GetChipType(self): return _AffyFileParser.CCHPFileHeader_GetChipType(self)
    def GetAlgName(self): return _AffyFileParser.CCHPFileHeader_GetAlgName(self)
    def GetAlgVersion(self): return _AffyFileParser.CCHPFileHeader_GetAlgVersion(self)
    def AlgorithmParameters(self): return _AffyFileParser.CCHPFileHeader_AlgorithmParameters(self)
    def SummaryParameters(self): return _AffyFileParser.CCHPFileHeader_SummaryParameters(self)
    def GetParentCellFile(self): return _AffyFileParser.CCHPFileHeader_GetParentCellFile(self)
    def GetProgID(self): return _AffyFileParser.CCHPFileHeader_GetProgID(self)
    def GetAlgorithmParameter(self, *args): return _AffyFileParser.CCHPFileHeader_GetAlgorithmParameter(self, *args)
    def GetSummaryParameter(self, *args): return _AffyFileParser.CCHPFileHeader_GetSummaryParameter(self, *args)
    def GetBackgroundZoneInfo(self): return _AffyFileParser.CCHPFileHeader_GetBackgroundZoneInfo(self)
    def GetBackgroundZones(self): return _AffyFileParser.CCHPFileHeader_GetBackgroundZones(self)
    def GetBackgroundZone(self, *args): return _AffyFileParser.CCHPFileHeader_GetBackgroundZone(self, *args)
    def GetMagicNumber(self): return _AffyFileParser.CCHPFileHeader_GetMagicNumber(self)
    def GetVersionNumber(self): return _AffyFileParser.CCHPFileHeader_GetVersionNumber(self)
    def SetCols(self, *args): return _AffyFileParser.CCHPFileHeader_SetCols(self, *args)
    def SetRows(self, *args): return _AffyFileParser.CCHPFileHeader_SetRows(self, *args)
    def SetNumProbeSets(self, *args): return _AffyFileParser.CCHPFileHeader_SetNumProbeSets(self, *args)
    def SetAssayType(self, *args): return _AffyFileParser.CCHPFileHeader_SetAssayType(self, *args)
    def SetChipType(self, *args): return _AffyFileParser.CCHPFileHeader_SetChipType(self, *args)
    def SetAlgName(self, *args): return _AffyFileParser.CCHPFileHeader_SetAlgName(self, *args)
    def SetAlgVersion(self, *args): return _AffyFileParser.CCHPFileHeader_SetAlgVersion(self, *args)
    def SetParentCellFile(self, *args): return _AffyFileParser.CCHPFileHeader_SetParentCellFile(self, *args)
    def SetProgID(self, *args): return _AffyFileParser.CCHPFileHeader_SetProgID(self, *args)
CCHPFileHeader_swigregister = _AffyFileParser.CCHPFileHeader_swigregister
CCHPFileHeader_swigregister(CCHPFileHeader)

class CProbeSetResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProbeSetResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProbeSetResults, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CProbeSetResults()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CProbeSetResults
    __del__ = lambda self : None;
CProbeSetResults_swigregister = _AffyFileParser.CProbeSetResults_swigregister
CProbeSetResults_swigregister(CProbeSetResults)

ABS_PRESENT_CALL = _AffyFileParser.ABS_PRESENT_CALL
ABS_MARGINAL_CALL = _AffyFileParser.ABS_MARGINAL_CALL
ABS_ABSENT_CALL = _AffyFileParser.ABS_ABSENT_CALL
ABS_NO_CALL = _AffyFileParser.ABS_NO_CALL
COMP_INCREASE_CALL = _AffyFileParser.COMP_INCREASE_CALL
COMP_DECREASE_CALL = _AffyFileParser.COMP_DECREASE_CALL
COMP_MOD_INCREASE_CALL = _AffyFileParser.COMP_MOD_INCREASE_CALL
COMP_MOD_DECREASE_CALL = _AffyFileParser.COMP_MOD_DECREASE_CALL
COMP_NO_CHANGE_CALL = _AffyFileParser.COMP_NO_CHANGE_CALL
COMP_NO_CALL = _AffyFileParser.COMP_NO_CALL
class CExpressionProbeSetResults(CProbeSetResults):
    __swig_setmethods__ = {}
    for _s in [CProbeSetResults]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExpressionProbeSetResults, name, value)
    __swig_getmethods__ = {}
    for _s in [CProbeSetResults]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExpressionProbeSetResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DetectionPValue"] = _AffyFileParser.CExpressionProbeSetResults_DetectionPValue_set
    __swig_getmethods__["DetectionPValue"] = _AffyFileParser.CExpressionProbeSetResults_DetectionPValue_get
    if _newclass:DetectionPValue = _swig_property(_AffyFileParser.CExpressionProbeSetResults_DetectionPValue_get, _AffyFileParser.CExpressionProbeSetResults_DetectionPValue_set)
    __swig_setmethods__["Signal"] = _AffyFileParser.CExpressionProbeSetResults_Signal_set
    __swig_getmethods__["Signal"] = _AffyFileParser.CExpressionProbeSetResults_Signal_get
    if _newclass:Signal = _swig_property(_AffyFileParser.CExpressionProbeSetResults_Signal_get, _AffyFileParser.CExpressionProbeSetResults_Signal_set)
    __swig_setmethods__["NumPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumPairs_set
    __swig_getmethods__["NumPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumPairs_get
    if _newclass:NumPairs = _swig_property(_AffyFileParser.CExpressionProbeSetResults_NumPairs_get, _AffyFileParser.CExpressionProbeSetResults_NumPairs_set)
    __swig_setmethods__["NumUsedPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumUsedPairs_set
    __swig_getmethods__["NumUsedPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumUsedPairs_get
    if _newclass:NumUsedPairs = _swig_property(_AffyFileParser.CExpressionProbeSetResults_NumUsedPairs_get, _AffyFileParser.CExpressionProbeSetResults_NumUsedPairs_set)
    __swig_setmethods__["Detection"] = _AffyFileParser.CExpressionProbeSetResults_Detection_set
    __swig_getmethods__["Detection"] = _AffyFileParser.CExpressionProbeSetResults_Detection_get
    if _newclass:Detection = _swig_property(_AffyFileParser.CExpressionProbeSetResults_Detection_get, _AffyFileParser.CExpressionProbeSetResults_Detection_set)
    __swig_setmethods__["m_HasCompResults"] = _AffyFileParser.CExpressionProbeSetResults_m_HasCompResults_set
    __swig_getmethods__["m_HasCompResults"] = _AffyFileParser.CExpressionProbeSetResults_m_HasCompResults_get
    if _newclass:m_HasCompResults = _swig_property(_AffyFileParser.CExpressionProbeSetResults_m_HasCompResults_get, _AffyFileParser.CExpressionProbeSetResults_m_HasCompResults_set)
    __swig_setmethods__["ChangePValue"] = _AffyFileParser.CExpressionProbeSetResults_ChangePValue_set
    __swig_getmethods__["ChangePValue"] = _AffyFileParser.CExpressionProbeSetResults_ChangePValue_get
    if _newclass:ChangePValue = _swig_property(_AffyFileParser.CExpressionProbeSetResults_ChangePValue_get, _AffyFileParser.CExpressionProbeSetResults_ChangePValue_set)
    __swig_setmethods__["SignalLogRatio"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatio_set
    __swig_getmethods__["SignalLogRatio"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatio_get
    if _newclass:SignalLogRatio = _swig_property(_AffyFileParser.CExpressionProbeSetResults_SignalLogRatio_get, _AffyFileParser.CExpressionProbeSetResults_SignalLogRatio_set)
    __swig_setmethods__["SignalLogRatioLow"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioLow_set
    __swig_getmethods__["SignalLogRatioLow"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioLow_get
    if _newclass:SignalLogRatioLow = _swig_property(_AffyFileParser.CExpressionProbeSetResults_SignalLogRatioLow_get, _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioLow_set)
    __swig_setmethods__["SignalLogRatioHigh"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioHigh_set
    __swig_getmethods__["SignalLogRatioHigh"] = _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioHigh_get
    if _newclass:SignalLogRatioHigh = _swig_property(_AffyFileParser.CExpressionProbeSetResults_SignalLogRatioHigh_get, _AffyFileParser.CExpressionProbeSetResults_SignalLogRatioHigh_set)
    __swig_setmethods__["NumCommonPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumCommonPairs_set
    __swig_getmethods__["NumCommonPairs"] = _AffyFileParser.CExpressionProbeSetResults_NumCommonPairs_get
    if _newclass:NumCommonPairs = _swig_property(_AffyFileParser.CExpressionProbeSetResults_NumCommonPairs_get, _AffyFileParser.CExpressionProbeSetResults_NumCommonPairs_set)
    __swig_setmethods__["Change"] = _AffyFileParser.CExpressionProbeSetResults_Change_set
    __swig_getmethods__["Change"] = _AffyFileParser.CExpressionProbeSetResults_Change_get
    if _newclass:Change = _swig_property(_AffyFileParser.CExpressionProbeSetResults_Change_get, _AffyFileParser.CExpressionProbeSetResults_Change_set)
    def GetDetectionString(self): return _AffyFileParser.CExpressionProbeSetResults_GetDetectionString(self)
    def GetChangeString(self): return _AffyFileParser.CExpressionProbeSetResults_GetChangeString(self)
    def __init__(self): 
        this = _AffyFileParser.new_CExpressionProbeSetResults()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CExpressionProbeSetResults
    __del__ = lambda self : None;
CExpressionProbeSetResults_swigregister = _AffyFileParser.CExpressionProbeSetResults_swigregister
CExpressionProbeSetResults_swigregister(CExpressionProbeSetResults)

ALLELE_A_CALL = _AffyFileParser.ALLELE_A_CALL
ALLELE_B_CALL = _AffyFileParser.ALLELE_B_CALL
ALLELE_AB_CALL = _AffyFileParser.ALLELE_AB_CALL
ALLELE_NO_CALL = _AffyFileParser.ALLELE_NO_CALL
class CGenotypeProbeSetResults(CProbeSetResults):
    __swig_setmethods__ = {}
    for _s in [CProbeSetResults]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGenotypeProbeSetResults, name, value)
    __swig_getmethods__ = {}
    for _s in [CProbeSetResults]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGenotypeProbeSetResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AlleleCall"] = _AffyFileParser.CGenotypeProbeSetResults_AlleleCall_set
    __swig_getmethods__["AlleleCall"] = _AffyFileParser.CGenotypeProbeSetResults_AlleleCall_get
    if _newclass:AlleleCall = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_AlleleCall_get, _AffyFileParser.CGenotypeProbeSetResults_AlleleCall_set)
    __swig_setmethods__["Confidence"] = _AffyFileParser.CGenotypeProbeSetResults_Confidence_set
    __swig_getmethods__["Confidence"] = _AffyFileParser.CGenotypeProbeSetResults_Confidence_get
    if _newclass:Confidence = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_Confidence_get, _AffyFileParser.CGenotypeProbeSetResults_Confidence_set)
    __swig_setmethods__["RAS1"] = _AffyFileParser.CGenotypeProbeSetResults_RAS1_set
    __swig_getmethods__["RAS1"] = _AffyFileParser.CGenotypeProbeSetResults_RAS1_get
    if _newclass:RAS1 = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_RAS1_get, _AffyFileParser.CGenotypeProbeSetResults_RAS1_set)
    __swig_setmethods__["RAS2"] = _AffyFileParser.CGenotypeProbeSetResults_RAS2_set
    __swig_getmethods__["RAS2"] = _AffyFileParser.CGenotypeProbeSetResults_RAS2_get
    if _newclass:RAS2 = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_RAS2_get, _AffyFileParser.CGenotypeProbeSetResults_RAS2_set)
    __swig_setmethods__["pvalue_AA"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_AA_set
    __swig_getmethods__["pvalue_AA"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_AA_get
    if _newclass:pvalue_AA = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_pvalue_AA_get, _AffyFileParser.CGenotypeProbeSetResults_pvalue_AA_set)
    __swig_setmethods__["pvalue_AB"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_AB_set
    __swig_getmethods__["pvalue_AB"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_AB_get
    if _newclass:pvalue_AB = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_pvalue_AB_get, _AffyFileParser.CGenotypeProbeSetResults_pvalue_AB_set)
    __swig_setmethods__["pvalue_BB"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_BB_set
    __swig_getmethods__["pvalue_BB"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_BB_get
    if _newclass:pvalue_BB = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_pvalue_BB_get, _AffyFileParser.CGenotypeProbeSetResults_pvalue_BB_set)
    __swig_setmethods__["pvalue_NoCall"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_NoCall_set
    __swig_getmethods__["pvalue_NoCall"] = _AffyFileParser.CGenotypeProbeSetResults_pvalue_NoCall_get
    if _newclass:pvalue_NoCall = _swig_property(_AffyFileParser.CGenotypeProbeSetResults_pvalue_NoCall_get, _AffyFileParser.CGenotypeProbeSetResults_pvalue_NoCall_set)
    def GetAlleleCallString(self): return _AffyFileParser.CGenotypeProbeSetResults_GetAlleleCallString(self)
    def __init__(self): 
        this = _AffyFileParser.new_CGenotypeProbeSetResults()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CGenotypeProbeSetResults
    __del__ = lambda self : None;
CGenotypeProbeSetResults_swigregister = _AffyFileParser.CGenotypeProbeSetResults_swigregister
CGenotypeProbeSetResults_swigregister(CGenotypeProbeSetResults)

class CUniversalProbeSetResults(CProbeSetResults):
    __swig_setmethods__ = {}
    for _s in [CProbeSetResults]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUniversalProbeSetResults, name, value)
    __swig_getmethods__ = {}
    for _s in [CProbeSetResults]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CUniversalProbeSetResults, name)
    __repr__ = _swig_repr
    def GetBackground(self): return _AffyFileParser.CUniversalProbeSetResults_GetBackground(self)
    def SetBackground(self, *args): return _AffyFileParser.CUniversalProbeSetResults_SetBackground(self, *args)
    def __init__(self): 
        this = _AffyFileParser.new_CUniversalProbeSetResults()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CUniversalProbeSetResults
    __del__ = lambda self : None;
CUniversalProbeSetResults_swigregister = _AffyFileParser.CUniversalProbeSetResults_swigregister
CUniversalProbeSetResults_swigregister(CUniversalProbeSetResults)

class ForceCallType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceCallType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForceCallType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _AffyFileParser.ForceCallType_position_set
    __swig_getmethods__["position"] = _AffyFileParser.ForceCallType_position_get
    if _newclass:position = _swig_property(_AffyFileParser.ForceCallType_position_get, _AffyFileParser.ForceCallType_position_set)
    __swig_setmethods__["call"] = _AffyFileParser.ForceCallType_call_set
    __swig_getmethods__["call"] = _AffyFileParser.ForceCallType_call_get
    if _newclass:call = _swig_property(_AffyFileParser.ForceCallType_call_get, _AffyFileParser.ForceCallType_call_set)
    __swig_setmethods__["reason"] = _AffyFileParser.ForceCallType_reason_set
    __swig_getmethods__["reason"] = _AffyFileParser.ForceCallType_reason_get
    if _newclass:reason = _swig_property(_AffyFileParser.ForceCallType_reason_get, _AffyFileParser.ForceCallType_reason_set)
    def __init__(self): 
        this = _AffyFileParser.new_ForceCallType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_ForceCallType
    __del__ = lambda self : None;
ForceCallType_swigregister = _AffyFileParser.ForceCallType_swigregister
ForceCallType_swigregister(ForceCallType)

NO_SIGNAL_THR_FORCE_CALL = _AffyFileParser.NO_SIGNAL_THR_FORCE_CALL
WEAK_SIGNAL_THR_FORCE_CALL = _AffyFileParser.WEAK_SIGNAL_THR_FORCE_CALL
SATURATION_LEVEL_FORCE_CALL = _AffyFileParser.SATURATION_LEVEL_FORCE_CALL
QUALITY_SCORE_THR_FORCE_CALL = _AffyFileParser.QUALITY_SCORE_THR_FORCE_CALL
TRACE_AND_SEQUENCE_PROFILES_FORCE_CALL = _AffyFileParser.TRACE_AND_SEQUENCE_PROFILES_FORCE_CALL
RELIABILITY_THR_FORCE_CALL = _AffyFileParser.RELIABILITY_THR_FORCE_CALL
class BaseCallType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCallType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCallType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _AffyFileParser.BaseCallType_position_set
    __swig_getmethods__["position"] = _AffyFileParser.BaseCallType_position_get
    if _newclass:position = _swig_property(_AffyFileParser.BaseCallType_position_get, _AffyFileParser.BaseCallType_position_set)
    __swig_setmethods__["call"] = _AffyFileParser.BaseCallType_call_set
    __swig_getmethods__["call"] = _AffyFileParser.BaseCallType_call_get
    if _newclass:call = _swig_property(_AffyFileParser.BaseCallType_call_get, _AffyFileParser.BaseCallType_call_set)
    def __init__(self): 
        this = _AffyFileParser.new_BaseCallType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BaseCallType
    __del__ = lambda self : None;
BaseCallType_swigregister = _AffyFileParser.BaseCallType_swigregister
BaseCallType_swigregister(BaseCallType)

class CResequencingResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CResequencingResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CResequencingResults, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CResequencingResults()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CResequencingResults
    __del__ = lambda self : None;
    def Clear(self): return _AffyFileParser.CResequencingResults_Clear(self)
    def GetCalledBases(self): return _AffyFileParser.CResequencingResults_GetCalledBases(self)
    def GetCalledBase(self, *args): return _AffyFileParser.CResequencingResults_GetCalledBase(self, *args)
    def GetCalledBasesSize(self): return _AffyFileParser.CResequencingResults_GetCalledBasesSize(self)
    def ResizeCalledBases(self, *args): return _AffyFileParser.CResequencingResults_ResizeCalledBases(self, *args)
    def SetCalledBase(self, *args): return _AffyFileParser.CResequencingResults_SetCalledBase(self, *args)
    def GetScores(self): return _AffyFileParser.CResequencingResults_GetScores(self)
    def GetScore(self, *args): return _AffyFileParser.CResequencingResults_GetScore(self, *args)
    def GetScoresSize(self): return _AffyFileParser.CResequencingResults_GetScoresSize(self)
    def ResizeScores(self, *args): return _AffyFileParser.CResequencingResults_ResizeScores(self, *args)
    def SetScore(self, *args): return _AffyFileParser.CResequencingResults_SetScore(self, *args)
    def GetForceCalls(self): return _AffyFileParser.CResequencingResults_GetForceCalls(self)
    def GetForceCall(self, *args): return _AffyFileParser.CResequencingResults_GetForceCall(self, *args)
    def GetForceCallsSize(self): return _AffyFileParser.CResequencingResults_GetForceCallsSize(self)
    def ResizeForceCalls(self, *args): return _AffyFileParser.CResequencingResults_ResizeForceCalls(self, *args)
    def SetForceCall(self, *args): return _AffyFileParser.CResequencingResults_SetForceCall(self, *args)
    def GetOrigCalls(self): return _AffyFileParser.CResequencingResults_GetOrigCalls(self)
    def GetOrigCall(self, *args): return _AffyFileParser.CResequencingResults_GetOrigCall(self, *args)
    def GetOrigCallsSize(self): return _AffyFileParser.CResequencingResults_GetOrigCallsSize(self)
    def ResizeOrigCalls(self, *args): return _AffyFileParser.CResequencingResults_ResizeOrigCalls(self, *args)
    def SetOrigCall(self, *args): return _AffyFileParser.CResequencingResults_SetOrigCall(self, *args)
CResequencingResults_swigregister = _AffyFileParser.CResequencingResults_swigregister
CResequencingResults_swigregister(CResequencingResults)

class CCHPFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCHPFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCHPFileData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CCHPFileData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCHPFileData
    __del__ = lambda self : None;
    def GetHeader(self): return _AffyFileParser.CCHPFileData_GetHeader(self)
    def GetExpressionResults(self, *args): return _AffyFileParser.CCHPFileData_GetExpressionResults(self, *args)
    def GetGenotypingResults(self, *args): return _AffyFileParser.CCHPFileData_GetGenotypingResults(self, *args)
    def GetUniversalResults(self, *args): return _AffyFileParser.CCHPFileData_GetUniversalResults(self, *args)
    def GetResequencingResults(self): return _AffyFileParser.CCHPFileData_GetResequencingResults(self)
    def GetError(self): return _AffyFileParser.CCHPFileData_GetError(self)
    def Read(self): return _AffyFileParser.CCHPFileData_Read(self)
    def ReadHeader(self): return _AffyFileParser.CCHPFileData_ReadHeader(self)
    def Exists(self): return _AffyFileParser.CCHPFileData_Exists(self)
    def IsXDACompatibleFile(self): return _AffyFileParser.CCHPFileData_IsXDACompatibleFile(self)
    def SetFileName(self, *args): return _AffyFileParser.CCHPFileData_SetFileName(self, *args)
    def GetFileName(self): return _AffyFileParser.CCHPFileData_GetFileName(self)
    def Clear(self): return _AffyFileParser.CCHPFileData_Clear(self)
CCHPFileData_swigregister = _AffyFileParser.CCHPFileData_swigregister
CCHPFileData_swigregister(CCHPFileData)

class CCHPFileWriter(CCHPFileData):
    __swig_setmethods__ = {}
    for _s in [CCHPFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCHPFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CCHPFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCHPFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CCHPFileWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCHPFileWriter
    __del__ = lambda self : None;
    def CreateNewFile(self): return _AffyFileParser.CCHPFileWriter_CreateNewFile(self)
    def InitializeForWriting(self, *args): return _AffyFileParser.CCHPFileWriter_InitializeForWriting(self, *args)
    def SetParentCelFileName(self, *args): return _AffyFileParser.CCHPFileWriter_SetParentCelFileName(self, *args)
    def SetProgID(self, *args): return _AffyFileParser.CCHPFileWriter_SetProgID(self, *args)
    def SetAlgorithmName(self, *args): return _AffyFileParser.CCHPFileWriter_SetAlgorithmName(self, *args)
    def SetAlgorithmVersion(self, *args): return _AffyFileParser.CCHPFileWriter_SetAlgorithmVersion(self, *args)
    def AddAlgorithmParameter(self, *args): return _AffyFileParser.CCHPFileWriter_AddAlgorithmParameter(self, *args)
    def AddChipSummaryParameter(self, *args): return _AffyFileParser.CCHPFileWriter_AddChipSummaryParameter(self, *args)
    def SetExpressionEntry(self, *args): return _AffyFileParser.CCHPFileWriter_SetExpressionEntry(self, *args)
    def SetMappingEntry(self, *args): return _AffyFileParser.CCHPFileWriter_SetMappingEntry(self, *args)
    def Save(self): return _AffyFileParser.CCHPFileWriter_Save(self)
    def AddBackgroundInfo(self, *args): return _AffyFileParser.CCHPFileWriter_AddBackgroundInfo(self, *args)
    def AddBackgroundZone(self, *args): return _AffyFileParser.CCHPFileWriter_AddBackgroundZone(self, *args)
CCHPFileWriter_swigregister = _AffyFileParser.CCHPFileWriter_swigregister
CCHPFileWriter_swigregister(CCHPFileWriter)

BROWSER_LINE_START = _AffyFileParser.BROWSER_LINE_START
TRACK_LINE_START = _AffyFileParser.TRACK_LINE_START
DEFAULT_TRACK_NAME = _AffyFileParser.DEFAULT_TRACK_NAME
class IntervalGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalGroup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parameters"] = _AffyFileParser.IntervalGroup_parameters_set
    __swig_getmethods__["parameters"] = _AffyFileParser.IntervalGroup_parameters_get
    if _newclass:parameters = _swig_property(_AffyFileParser.IntervalGroup_parameters_get, _AffyFileParser.IntervalGroup_parameters_set)
    __swig_setmethods__["intervals"] = _AffyFileParser.IntervalGroup_intervals_set
    __swig_getmethods__["intervals"] = _AffyFileParser.IntervalGroup_intervals_get
    if _newclass:intervals = _swig_property(_AffyFileParser.IntervalGroup_intervals_get, _AffyFileParser.IntervalGroup_intervals_set)
    def Clear(self): return _AffyFileParser.IntervalGroup_Clear(self)
    def __init__(self): 
        this = _AffyFileParser.new_IntervalGroup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_IntervalGroup
    __del__ = lambda self : None;
IntervalGroup_swigregister = _AffyFileParser.IntervalGroup_swigregister
IntervalGroup_swigregister(IntervalGroup)

class BEDFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BEDFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BEDFileData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_BEDFileData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BEDFileData
    __del__ = lambda self : None;
    def Clear(self): return _AffyFileParser.BEDFileData_Clear(self)
    def FileName(self): return _AffyFileParser.BEDFileData_FileName(self)
    def Browser(self): return _AffyFileParser.BEDFileData_Browser(self)
    def Track(self): return _AffyFileParser.BEDFileData_Track(self)
    def FormatBrowser(self, *args): return _AffyFileParser.BEDFileData_FormatBrowser(self, *args)
    def FormatTrack(self, name="AFFX track", desc=""): return _AffyFileParser.BEDFileData_FormatTrack(self, name, desc)
    def IntervalGroups(self): return _AffyFileParser.BEDFileData_IntervalGroups(self)
    def Read(self): return _AffyFileParser.BEDFileData_Read(self)
BEDFileData_swigregister = _AffyFileParser.BEDFileData_swigregister
BEDFileData_swigregister(BEDFileData)

class BEDFileWriter(BEDFileData):
    __swig_setmethods__ = {}
    for _s in [BEDFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BEDFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [BEDFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BEDFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_BEDFileWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BEDFileWriter
    __del__ = lambda self : None;
    def Write(self): return _AffyFileParser.BEDFileWriter_Write(self)
BEDFileWriter_swigregister = _AffyFileParser.BEDFileWriter_swigregister
BEDFileWriter_swigregister(BEDFileWriter)

BAR_DATA_DOUBLE = _AffyFileParser.BAR_DATA_DOUBLE
BAR_DATA_FLOAT = _AffyFileParser.BAR_DATA_FLOAT
BAR_DATA_INTEGER = _AffyFileParser.BAR_DATA_INTEGER
BAR_DATA_SHORT = _AffyFileParser.BAR_DATA_SHORT
BAR_DATA_CHAR = _AffyFileParser.BAR_DATA_CHAR
BAR_DATA_UINTEGER = _AffyFileParser.BAR_DATA_UINTEGER
BAR_DATA_USHORT = _AffyFileParser.BAR_DATA_USHORT
BAR_DATA_UCHAR = _AffyFileParser.BAR_DATA_UCHAR
class BarSequenceResultData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarSequenceResultData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BarSequenceResultData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dValue"] = _AffyFileParser.BarSequenceResultData_dValue_set
    __swig_getmethods__["dValue"] = _AffyFileParser.BarSequenceResultData_dValue_get
    if _newclass:dValue = _swig_property(_AffyFileParser.BarSequenceResultData_dValue_get, _AffyFileParser.BarSequenceResultData_dValue_set)
    __swig_setmethods__["fValue"] = _AffyFileParser.BarSequenceResultData_fValue_set
    __swig_getmethods__["fValue"] = _AffyFileParser.BarSequenceResultData_fValue_get
    if _newclass:fValue = _swig_property(_AffyFileParser.BarSequenceResultData_fValue_get, _AffyFileParser.BarSequenceResultData_fValue_set)
    __swig_setmethods__["iValue"] = _AffyFileParser.BarSequenceResultData_iValue_set
    __swig_getmethods__["iValue"] = _AffyFileParser.BarSequenceResultData_iValue_get
    if _newclass:iValue = _swig_property(_AffyFileParser.BarSequenceResultData_iValue_get, _AffyFileParser.BarSequenceResultData_iValue_set)
    __swig_setmethods__["sValue"] = _AffyFileParser.BarSequenceResultData_sValue_set
    __swig_getmethods__["sValue"] = _AffyFileParser.BarSequenceResultData_sValue_get
    if _newclass:sValue = _swig_property(_AffyFileParser.BarSequenceResultData_sValue_get, _AffyFileParser.BarSequenceResultData_sValue_set)
    __swig_setmethods__["cValue"] = _AffyFileParser.BarSequenceResultData_cValue_set
    __swig_getmethods__["cValue"] = _AffyFileParser.BarSequenceResultData_cValue_get
    if _newclass:cValue = _swig_property(_AffyFileParser.BarSequenceResultData_cValue_get, _AffyFileParser.BarSequenceResultData_cValue_set)
    __swig_setmethods__["uiValue"] = _AffyFileParser.BarSequenceResultData_uiValue_set
    __swig_getmethods__["uiValue"] = _AffyFileParser.BarSequenceResultData_uiValue_get
    if _newclass:uiValue = _swig_property(_AffyFileParser.BarSequenceResultData_uiValue_get, _AffyFileParser.BarSequenceResultData_uiValue_set)
    __swig_setmethods__["usValue"] = _AffyFileParser.BarSequenceResultData_usValue_set
    __swig_getmethods__["usValue"] = _AffyFileParser.BarSequenceResultData_usValue_get
    if _newclass:usValue = _swig_property(_AffyFileParser.BarSequenceResultData_usValue_get, _AffyFileParser.BarSequenceResultData_usValue_set)
    __swig_setmethods__["ucValue"] = _AffyFileParser.BarSequenceResultData_ucValue_set
    __swig_getmethods__["ucValue"] = _AffyFileParser.BarSequenceResultData_ucValue_get
    if _newclass:ucValue = _swig_property(_AffyFileParser.BarSequenceResultData_ucValue_get, _AffyFileParser.BarSequenceResultData_ucValue_set)
    def __init__(self): 
        this = _AffyFileParser.new_BarSequenceResultData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_BarSequenceResultData
    __del__ = lambda self : None;
BarSequenceResultData_swigregister = _AffyFileParser.BarSequenceResultData_swigregister
BarSequenceResultData_swigregister(BarSequenceResultData)

class CGDACSequenceResultItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGDACSequenceResultItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGDACSequenceResultItem, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CGDACSequenceResultItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CGDACSequenceResultItem
    __del__ = lambda self : None;
    def GetName(self): return _AffyFileParser.CGDACSequenceResultItem_GetName(self)
    def GetVersion(self): return _AffyFileParser.CGDACSequenceResultItem_GetVersion(self)
    def GetGroupName(self): return _AffyFileParser.CGDACSequenceResultItem_GetGroupName(self)
    def GetNumberDataPoints(self): return _AffyFileParser.CGDACSequenceResultItem_GetNumberDataPoints(self)
    def GetNumberColumns(self): return _AffyFileParser.CGDACSequenceResultItem_GetNumberColumns(self)
    def GetColumnType(self, *args): return _AffyFileParser.CGDACSequenceResultItem_GetColumnType(self, *args)
    def GetData(self, *args): return _AffyFileParser.CGDACSequenceResultItem_GetData(self, *args)
    def GetNumberParameters(self): return _AffyFileParser.CGDACSequenceResultItem_GetNumberParameters(self)
    def GetParameter(self, *args): return _AffyFileParser.CGDACSequenceResultItem_GetParameter(self, *args)
    def SetName(self, *args): return _AffyFileParser.CGDACSequenceResultItem_SetName(self, *args)
    def SetVersion(self, *args): return _AffyFileParser.CGDACSequenceResultItem_SetVersion(self, *args)
    def SetGroupName(self, *args): return _AffyFileParser.CGDACSequenceResultItem_SetGroupName(self, *args)
    def SetNumberDataPoints(self, *args): return _AffyFileParser.CGDACSequenceResultItem_SetNumberDataPoints(self, *args)
    def SetDataPoint(self, *args): return _AffyFileParser.CGDACSequenceResultItem_SetDataPoint(self, *args)
    def AddParameter(self, *args): return _AffyFileParser.CGDACSequenceResultItem_AddParameter(self, *args)
CGDACSequenceResultItem_swigregister = _AffyFileParser.CGDACSequenceResultItem_swigregister
CGDACSequenceResultItem_swigregister(CGDACSequenceResultItem)

class CBARFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBARFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBARFileData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CBARFileData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CBARFileData
    __del__ = lambda self : None;
    def SetFileName(self, *args): return _AffyFileParser.CBARFileData_SetFileName(self, *args)
    def GetFileName(self): return _AffyFileParser.CBARFileData_GetFileName(self)
    def Read(self): return _AffyFileParser.CBARFileData_Read(self)
    def ReadHeader(self): return _AffyFileParser.CBARFileData_ReadHeader(self)
    def Exists(self): return _AffyFileParser.CBARFileData_Exists(self)
    def Close(self): return _AffyFileParser.CBARFileData_Close(self)
    def GetError(self): return _AffyFileParser.CBARFileData_GetError(self)
    def GetVersion(self): return _AffyFileParser.CBARFileData_GetVersion(self)
    def GetNumberSequences(self): return _AffyFileParser.CBARFileData_GetNumberSequences(self)
    def GetNumberColumns(self): return _AffyFileParser.CBARFileData_GetNumberColumns(self)
    def GetNumberParameters(self): return _AffyFileParser.CBARFileData_GetNumberParameters(self)
    def GetParameter(self, *args): return _AffyFileParser.CBARFileData_GetParameter(self, *args)
    def GetColumnTypes(self, *args): return _AffyFileParser.CBARFileData_GetColumnTypes(self, *args)
    def GetResults(self, *args): return _AffyFileParser.CBARFileData_GetResults(self, *args)
    def AddAlgorithmParameter(self, *args): return _AffyFileParser.CBARFileData_AddAlgorithmParameter(self, *args)
    def AddColumn(self, *args): return _AffyFileParser.CBARFileData_AddColumn(self, *args)
    def SetNumberSequences(self, *args): return _AffyFileParser.CBARFileData_SetNumberSequences(self, *args)
    def GetResultsPtr(self, *args): return _AffyFileParser.CBARFileData_GetResultsPtr(self, *args)
CBARFileData_swigregister = _AffyFileParser.CBARFileData_swigregister
CBARFileData_swigregister(CBARFileData)

class CBARFileWriter(CBARFileData):
    __swig_setmethods__ = {}
    for _s in [CBARFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBARFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CBARFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBARFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CBARFileWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CBARFileWriter
    __del__ = lambda self : None;
    def CreateNewFile(self): return _AffyFileParser.CBARFileWriter_CreateNewFile(self)
    def Save(self): return _AffyFileParser.CBARFileWriter_Save(self)
CBARFileWriter_swigregister = _AffyFileParser.CBARFileWriter_swigregister
CBARFileWriter_swigregister(CBARFileWriter)

BPMAP_FILE_HEADER_BYTES = _AffyFileParser.BPMAP_FILE_HEADER_BYTES
BPMAP_FILE_HEADER_LEN = _AffyFileParser.BPMAP_FILE_HEADER_LEN
PM_ONLY = _AffyFileParser.PM_ONLY
PM_MM = _AffyFileParser.PM_MM
PROBE_STORAGE_BUFFER_LENGTH = _AffyFileParser.PROBE_STORAGE_BUFFER_LENGTH
class GDACSequenceHitItemType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GDACSequenceHitItemType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GDACSequenceHitItemType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PMX"] = _AffyFileParser.GDACSequenceHitItemType_PMX_set
    __swig_getmethods__["PMX"] = _AffyFileParser.GDACSequenceHitItemType_PMX_get
    if _newclass:PMX = _swig_property(_AffyFileParser.GDACSequenceHitItemType_PMX_get, _AffyFileParser.GDACSequenceHitItemType_PMX_set)
    __swig_setmethods__["PMY"] = _AffyFileParser.GDACSequenceHitItemType_PMY_set
    __swig_getmethods__["PMY"] = _AffyFileParser.GDACSequenceHitItemType_PMY_get
    if _newclass:PMY = _swig_property(_AffyFileParser.GDACSequenceHitItemType_PMY_get, _AffyFileParser.GDACSequenceHitItemType_PMY_set)
    __swig_setmethods__["MMX"] = _AffyFileParser.GDACSequenceHitItemType_MMX_set
    __swig_getmethods__["MMX"] = _AffyFileParser.GDACSequenceHitItemType_MMX_get
    if _newclass:MMX = _swig_property(_AffyFileParser.GDACSequenceHitItemType_MMX_get, _AffyFileParser.GDACSequenceHitItemType_MMX_set)
    __swig_setmethods__["MMY"] = _AffyFileParser.GDACSequenceHitItemType_MMY_set
    __swig_getmethods__["MMY"] = _AffyFileParser.GDACSequenceHitItemType_MMY_get
    if _newclass:MMY = _swig_property(_AffyFileParser.GDACSequenceHitItemType_MMY_get, _AffyFileParser.GDACSequenceHitItemType_MMY_set)
    __swig_setmethods__["MatchScore"] = _AffyFileParser.GDACSequenceHitItemType_MatchScore_set
    __swig_getmethods__["MatchScore"] = _AffyFileParser.GDACSequenceHitItemType_MatchScore_get
    if _newclass:MatchScore = _swig_property(_AffyFileParser.GDACSequenceHitItemType_MatchScore_get, _AffyFileParser.GDACSequenceHitItemType_MatchScore_set)
    __swig_setmethods__["Position"] = _AffyFileParser.GDACSequenceHitItemType_Position_set
    __swig_getmethods__["Position"] = _AffyFileParser.GDACSequenceHitItemType_Position_get
    if _newclass:Position = _swig_property(_AffyFileParser.GDACSequenceHitItemType_Position_get, _AffyFileParser.GDACSequenceHitItemType_Position_set)
    __swig_setmethods__["PMProbe"] = _AffyFileParser.GDACSequenceHitItemType_PMProbe_set
    __swig_getmethods__["PMProbe"] = _AffyFileParser.GDACSequenceHitItemType_PMProbe_get
    if _newclass:PMProbe = _swig_property(_AffyFileParser.GDACSequenceHitItemType_PMProbe_get, _AffyFileParser.GDACSequenceHitItemType_PMProbe_set)
    __swig_setmethods__["ProbeLength"] = _AffyFileParser.GDACSequenceHitItemType_ProbeLength_set
    __swig_getmethods__["ProbeLength"] = _AffyFileParser.GDACSequenceHitItemType_ProbeLength_get
    if _newclass:ProbeLength = _swig_property(_AffyFileParser.GDACSequenceHitItemType_ProbeLength_get, _AffyFileParser.GDACSequenceHitItemType_ProbeLength_set)
    __swig_setmethods__["TopStrand"] = _AffyFileParser.GDACSequenceHitItemType_TopStrand_set
    __swig_getmethods__["TopStrand"] = _AffyFileParser.GDACSequenceHitItemType_TopStrand_get
    if _newclass:TopStrand = _swig_property(_AffyFileParser.GDACSequenceHitItemType_TopStrand_get, _AffyFileParser.GDACSequenceHitItemType_TopStrand_set)
    def __lt__(self, *args): return _AffyFileParser.GDACSequenceHitItemType___lt__(self, *args)
    __swig_setmethods__["PackedPMProbe"] = _AffyFileParser.GDACSequenceHitItemType_PackedPMProbe_set
    __swig_getmethods__["PackedPMProbe"] = _AffyFileParser.GDACSequenceHitItemType_PackedPMProbe_get
    if _newclass:PackedPMProbe = _swig_property(_AffyFileParser.GDACSequenceHitItemType_PackedPMProbe_get, _AffyFileParser.GDACSequenceHitItemType_PackedPMProbe_set)
    def __init__(self): 
        this = _AffyFileParser.new_GDACSequenceHitItemType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_GDACSequenceHitItemType
    __del__ = lambda self : None;
GDACSequenceHitItemType_swigregister = _AffyFileParser.GDACSequenceHitItemType_swigregister
GDACSequenceHitItemType_swigregister(GDACSequenceHitItemType)

HIT_ITEM_SIZE_WITH_PROBE_PAIRS = _AffyFileParser.HIT_ITEM_SIZE_WITH_PROBE_PAIRS
HIT_ITEM_SIZE_WITH_PM_ONLY = _AffyFileParser.HIT_ITEM_SIZE_WITH_PM_ONLY
class CGDACSequenceItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGDACSequenceItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGDACSequenceItem, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CGDACSequenceItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CGDACSequenceItem
    __del__ = lambda self : None;
    def GetName(self): return _AffyFileParser.CGDACSequenceItem_GetName(self)
    def GroupName(self): return _AffyFileParser.CGDACSequenceItem_GroupName(self)
    def GetSeqVersion(self): return _AffyFileParser.CGDACSequenceItem_GetSeqVersion(self)
    def GetProbeMapping(self): return _AffyFileParser.CGDACSequenceItem_GetProbeMapping(self)
    def GetNumber(self): return _AffyFileParser.CGDACSequenceItem_GetNumber(self)
    def GetNumberHits(self): return _AffyFileParser.CGDACSequenceItem_GetNumberHits(self)
    def GetNumberParameters(self): return _AffyFileParser.CGDACSequenceItem_GetNumberParameters(self)
    def GetParameter(self, *args): return _AffyFileParser.CGDACSequenceItem_GetParameter(self, *args)
    def GetHitItem(self, *args): return _AffyFileParser.CGDACSequenceItem_GetHitItem(self, *args)
CGDACSequenceItem_swigregister = _AffyFileParser.CGDACSequenceItem_swigregister
CGDACSequenceItem_swigregister(CGDACSequenceItem)

class CBPMAPFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBPMAPFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBPMAPFileData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CBPMAPFileData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CBPMAPFileData
    __del__ = lambda self : None;
    def SetFileName(self, *args): return _AffyFileParser.CBPMAPFileData_SetFileName(self, *args)
    def GetFileName(self): return _AffyFileParser.CBPMAPFileData_GetFileName(self)
    def Read(self): return _AffyFileParser.CBPMAPFileData_Read(self)
    def ReadHeader(self): return _AffyFileParser.CBPMAPFileData_ReadHeader(self)
    def Exists(self): return _AffyFileParser.CBPMAPFileData_Exists(self)
    def Close(self): return _AffyFileParser.CBPMAPFileData_Close(self)
    def GetError(self): return _AffyFileParser.CBPMAPFileData_GetError(self)
    def GetNumberSequences(self): return _AffyFileParser.CBPMAPFileData_GetNumberSequences(self)
    def GetVersion(self): return _AffyFileParser.CBPMAPFileData_GetVersion(self)
    def GetSequenceItem(self, *args): return _AffyFileParser.CBPMAPFileData_GetSequenceItem(self, *args)
CBPMAPFileData_swigregister = _AffyFileParser.CBPMAPFileData_swigregister
CBPMAPFileData_swigregister(CBPMAPFileData)

BPMAP_VERSION = _AffyFileParser.BPMAP_VERSION
class CGDACSequenceItemWriter(CGDACSequenceItem):
    __swig_setmethods__ = {}
    for _s in [CGDACSequenceItem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGDACSequenceItemWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CGDACSequenceItem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGDACSequenceItemWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CGDACSequenceItemWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CGDACSequenceItemWriter
    __del__ = lambda self : None;
    def GetError(self): return _AffyFileParser.CGDACSequenceItemWriter_GetError(self)
    def copyMe(self): return _AffyFileParser.CGDACSequenceItemWriter_copyMe(self)
    def __lt__(self, *args): return _AffyFileParser.CGDACSequenceItemWriter___lt__(self, *args)
CGDACSequenceItemWriter_swigregister = _AffyFileParser.CGDACSequenceItemWriter_swigregister
CGDACSequenceItemWriter_swigregister(CGDACSequenceItemWriter)

class CBPMAPFileWriter(CBPMAPFileData):
    __swig_setmethods__ = {}
    for _s in [CBPMAPFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBPMAPFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CBPMAPFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBPMAPFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CBPMAPFileWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CBPMAPFileWriter
    __del__ = lambda self : None;
    def GetTpmapFileName(self): return _AffyFileParser.CBPMAPFileWriter_GetTpmapFileName(self)
    def SetTpmapFileName(self, *args): return _AffyFileParser.CBPMAPFileWriter_SetTpmapFileName(self, *args)
    def WriteBpmap(self): return _AffyFileParser.CBPMAPFileWriter_WriteBpmap(self)
    def TpmapExists(self): return _AffyFileParser.CBPMAPFileWriter_TpmapExists(self)
    def ReadTpmap(self): return _AffyFileParser.CBPMAPFileWriter_ReadTpmap(self)
CBPMAPFileWriter_swigregister = _AffyFileParser.CBPMAPFileWriter_swigregister
CBPMAPFileWriter_swigregister(CBPMAPFileWriter)

class ProbeSetIndiciesType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbeSetIndiciesType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProbeSetIndiciesType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["probeSetName"] = _AffyFileParser.ProbeSetIndiciesType_probeSetName_set
    __swig_getmethods__["probeSetName"] = _AffyFileParser.ProbeSetIndiciesType_probeSetName_get
    if _newclass:probeSetName = _swig_property(_AffyFileParser.ProbeSetIndiciesType_probeSetName_get, _AffyFileParser.ProbeSetIndiciesType_probeSetName_set)
    __swig_setmethods__["indicies"] = _AffyFileParser.ProbeSetIndiciesType_indicies_set
    __swig_getmethods__["indicies"] = _AffyFileParser.ProbeSetIndiciesType_indicies_get
    if _newclass:indicies = _swig_property(_AffyFileParser.ProbeSetIndiciesType_indicies_get, _AffyFileParser.ProbeSetIndiciesType_indicies_set)
    def __init__(self): 
        this = _AffyFileParser.new_ProbeSetIndiciesType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_ProbeSetIndiciesType
    __del__ = lambda self : None;
ProbeSetIndiciesType_swigregister = _AffyFileParser.ProbeSetIndiciesType_swigregister
ProbeSetIndiciesType_swigregister(ProbeSetIndiciesType)

class CMSKFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMSKFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMSKFileData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CMSKFileData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CMSKFileData
    __del__ = lambda self : None;
    def SetFileName(self, *args): return _AffyFileParser.CMSKFileData_SetFileName(self, *args)
    def GetFileName(self): return _AffyFileParser.CMSKFileData_GetFileName(self)
    def GetArrayType(self): return _AffyFileParser.CMSKFileData_GetArrayType(self)
    def GetProbeSetIndiciesListCount(self): return _AffyFileParser.CMSKFileData_GetProbeSetIndiciesListCount(self)
    def GetProbeSetListCount(self): return _AffyFileParser.CMSKFileData_GetProbeSetListCount(self)
    def GetError(self): return _AffyFileParser.CMSKFileData_GetError(self)
    def GetProbeSetIndiciesIterators(self, *args): return _AffyFileParser.CMSKFileData_GetProbeSetIndiciesIterators(self, *args)
    def GetProbeSetIterators(self, *args): return _AffyFileParser.CMSKFileData_GetProbeSetIterators(self, *args)
    def Read(self): return _AffyFileParser.CMSKFileData_Read(self)
    def Exists(self): return _AffyFileParser.CMSKFileData_Exists(self)
    def Clear(self): return _AffyFileParser.CMSKFileData_Clear(self)
CMSKFileData_swigregister = _AffyFileParser.CMSKFileData_swigregister
CMSKFileData_swigregister(CMSKFileData)

class CMSKFileWriter(CMSKFileData):
    __swig_setmethods__ = {}
    for _s in [CMSKFileData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMSKFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [CMSKFileData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMSKFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CMSKFileWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CMSKFileWriter
    __del__ = lambda self : None;
    def SetArrayType(self, *args): return _AffyFileParser.CMSKFileWriter_SetArrayType(self, *args)
    def Save(self): return _AffyFileParser.CMSKFileWriter_Save(self)
    def AddProbeSetIndicies(self, *args): return _AffyFileParser.CMSKFileWriter_AddProbeSetIndicies(self, *args)
    def AddProbeSet(self, *args): return _AffyFileParser.CMSKFileWriter_AddProbeSet(self, *args)
CMSKFileWriter_swigregister = _AffyFileParser.CMSKFileWriter_swigregister
CMSKFileWriter_swigregister(CMSKFileWriter)

class CELFileEntryType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CELFileEntryType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CELFileEntryType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Intensity"] = _AffyFileParser.CELFileEntryType_Intensity_set
    __swig_getmethods__["Intensity"] = _AffyFileParser.CELFileEntryType_Intensity_get
    if _newclass:Intensity = _swig_property(_AffyFileParser.CELFileEntryType_Intensity_get, _AffyFileParser.CELFileEntryType_Intensity_set)
    __swig_setmethods__["Stdv"] = _AffyFileParser.CELFileEntryType_Stdv_set
    __swig_getmethods__["Stdv"] = _AffyFileParser.CELFileEntryType_Stdv_get
    if _newclass:Stdv = _swig_property(_AffyFileParser.CELFileEntryType_Stdv_get, _AffyFileParser.CELFileEntryType_Stdv_set)
    __swig_setmethods__["Pixels"] = _AffyFileParser.CELFileEntryType_Pixels_set
    __swig_getmethods__["Pixels"] = _AffyFileParser.CELFileEntryType_Pixels_get
    if _newclass:Pixels = _swig_property(_AffyFileParser.CELFileEntryType_Pixels_get, _AffyFileParser.CELFileEntryType_Pixels_set)
    def __init__(self): 
        this = _AffyFileParser.new_CELFileEntryType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CELFileEntryType
    __del__ = lambda self : None;
CELFileEntryType_swigregister = _AffyFileParser.CELFileEntryType_swigregister
CELFileEntryType_swigregister(CELFileEntryType)

class CELFileTranscriptomeEntryType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CELFileTranscriptomeEntryType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CELFileTranscriptomeEntryType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Intensity"] = _AffyFileParser.CELFileTranscriptomeEntryType_Intensity_set
    __swig_getmethods__["Intensity"] = _AffyFileParser.CELFileTranscriptomeEntryType_Intensity_get
    if _newclass:Intensity = _swig_property(_AffyFileParser.CELFileTranscriptomeEntryType_Intensity_get, _AffyFileParser.CELFileTranscriptomeEntryType_Intensity_set)
    __swig_setmethods__["Stdv"] = _AffyFileParser.CELFileTranscriptomeEntryType_Stdv_set
    __swig_getmethods__["Stdv"] = _AffyFileParser.CELFileTranscriptomeEntryType_Stdv_get
    if _newclass:Stdv = _swig_property(_AffyFileParser.CELFileTranscriptomeEntryType_Stdv_get, _AffyFileParser.CELFileTranscriptomeEntryType_Stdv_set)
    __swig_setmethods__["Pixels"] = _AffyFileParser.CELFileTranscriptomeEntryType_Pixels_set
    __swig_getmethods__["Pixels"] = _AffyFileParser.CELFileTranscriptomeEntryType_Pixels_get
    if _newclass:Pixels = _swig_property(_AffyFileParser.CELFileTranscriptomeEntryType_Pixels_get, _AffyFileParser.CELFileTranscriptomeEntryType_Pixels_set)
    def __init__(self): 
        this = _AffyFileParser.new_CELFileTranscriptomeEntryType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CELFileTranscriptomeEntryType
    __del__ = lambda self : None;
CELFileTranscriptomeEntryType_swigregister = _AffyFileParser.CELFileTranscriptomeEntryType_swigregister
CELFileTranscriptomeEntryType_swigregister(CELFileTranscriptomeEntryType)

class CCELFileHeaderData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCELFileHeaderData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCELFileHeaderData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _AffyFileParser.new_CCELFileHeaderData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCELFileHeaderData
    __del__ = lambda self : None;
    def Clear(self): return _AffyFileParser.CCELFileHeaderData_Clear(self)
    def SetMagic(self, *args): return _AffyFileParser.CCELFileHeaderData_SetMagic(self, *args)
    def GetMagic(self): return _AffyFileParser.CCELFileHeaderData_GetMagic(self)
    def SetVersion(self, *args): return _AffyFileParser.CCELFileHeaderData_SetVersion(self, *args)
    def GetVersion(self): return _AffyFileParser.CCELFileHeaderData_GetVersion(self)
    def SetCols(self, *args): return _AffyFileParser.CCELFileHeaderData_SetCols(self, *args)
    def GetCols(self): return _AffyFileParser.CCELFileHeaderData_GetCols(self)
    def SetRows(self, *args): return _AffyFileParser.CCELFileHeaderData_SetRows(self, *args)
    def GetRows(self): return _AffyFileParser.CCELFileHeaderData_GetRows(self)
    def SetCells(self, *args): return _AffyFileParser.CCELFileHeaderData_SetCells(self, *args)
    def GetCells(self): return _AffyFileParser.CCELFileHeaderData_GetCells(self)
    def AppendHeader(self, *args): return _AffyFileParser.CCELFileHeaderData_AppendHeader(self, *args)
    def SetHeader(self, *args): return _AffyFileParser.CCELFileHeaderData_SetHeader(self, *args)
    def GetHeader(self): return _AffyFileParser.CCELFileHeaderData_GetHeader(self)
    def SetAlg(self, *args): return _AffyFileParser.CCELFileHeaderData_SetAlg(self, *args)
    def GetAlg(self): return _AffyFileParser.CCELFileHeaderData_GetAlg(self)
    def SetParams(self, *args): return _AffyFileParser.CCELFileHeaderData_SetParams(self, *args)
    def GetParams(self): return _AffyFileParser.CCELFileHeaderData_GetParams(self)
    def ParseChipType(self): return _AffyFileParser.CCELFileHeaderData_ParseChipType(self)
    def SetChipType(self, *args): return _AffyFileParser.CCELFileHeaderData_SetChipType(self, *args)
    def GetChipType(self): return _AffyFileParser.CCELFileHeaderData_GetChipType(self)
    def ParseDatHeader(self): return _AffyFileParser.CCELFileHeaderData_ParseDatHeader(self)
    def SetDatHeader(self, *args): return _AffyFileParser.CCELFileHeaderData_SetDatHeader(self, *args)
    def GetDatHeader(self): return _AffyFileParser.CCELFileHeaderData_GetDatHeader(self)
    def SetMargin(self, *args): return _AffyFileParser.CCELFileHeaderData_SetMargin(self, *args)
    def GetMargin(self): return _AffyFileParser.CCELFileHeaderData_GetMargin(self)
    def SetOutliers(self, *args): return _AffyFileParser.CCELFileHeaderData_SetOutliers(self, *args)
    def GetOutliers(self): return _AffyFileParser.CCELFileHeaderData_GetOutliers(self)
    def IncrementOutliers(self): return _AffyFileParser.CCELFileHeaderData_IncrementOutliers(self)
    def DecrementOutliers(self): return _AffyFileParser.CCELFileHeaderData_DecrementOutliers(self)
    def SetMasked(self, *args): return _AffyFileParser.CCELFileHeaderData_SetMasked(self, *args)
    def GetMasked(self): return _AffyFileParser.CCELFileHeaderData_GetMasked(self)
    def IncrementMasked(self): return _AffyFileParser.CCELFileHeaderData_IncrementMasked(self)
    def DecrementMasked(self): return _AffyFileParser.CCELFileHeaderData_DecrementMasked(self)
    def ParseAlgorithmParameters(self): return _AffyFileParser.CCELFileHeaderData_ParseAlgorithmParameters(self)
    def AddAlgorithmParameter(self, *args): return _AffyFileParser.CCELFileHeaderData_AddAlgorithmParameter(self, *args)
    def SetAlgorithmParameter(self, *args): return _AffyFileParser.CCELFileHeaderData_SetAlgorithmParameter(self, *args)
    def GetAlgorithmParameter(self, *args): return _AffyFileParser.CCELFileHeaderData_GetAlgorithmParameter(self, *args)
    def GetAlgorithmParameterTag(self, *args): return _AffyFileParser.CCELFileHeaderData_GetAlgorithmParameterTag(self, *args)
    def GetNumberAlgorithmParameters(self): return _AffyFileParser.CCELFileHeaderData_GetNumberAlgorithmParameters(self)
    def GetAlgorithmParameters(self): return _AffyFileParser.CCELFileHeaderData_GetAlgorithmParameters(self)
    def SetGridCorners(self, *args): return _AffyFileParser.CCELFileHeaderData_SetGridCorners(self, *args)
    def ParseCorners(self): return _AffyFileParser.CCELFileHeaderData_ParseCorners(self)
    def GetGridCorners(self): return _AffyFileParser.CCELFileHeaderData_GetGridCorners(self)
CCELFileHeaderData_swigregister = _AffyFileParser.CCELFileHeaderData_swigregister
CCELFileHeaderData_swigregister(CCELFileHeaderData)

class CCELFileData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCELFileData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCELFileData, name)
    __repr__ = _swig_repr
    UNKNOWN = _AffyFileParser.CCELFileData_UNKNOWN
    TEXT_CEL = _AffyFileParser.CCELFileData_TEXT_CEL
    XDA_BCEL = _AffyFileParser.CCELFileData_XDA_BCEL
    TRANSCRIPTOME_BCEL = _AffyFileParser.CCELFileData_TRANSCRIPTOME_BCEL
    COMPACT_BCEL = _AffyFileParser.CCELFileData_COMPACT_BCEL
    CEL_ALL = _AffyFileParser.CCELFileData_CEL_ALL
    CEL_DATA = _AffyFileParser.CCELFileData_CEL_DATA
    CEL_OUTLIER = _AffyFileParser.CCELFileData_CEL_OUTLIER
    CEL_MASK = _AffyFileParser.CCELFileData_CEL_MASK
    def __init__(self): 
        this = _AffyFileParser.new_CCELFileData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AffyFileParser.delete_CCELFileData
    __del__ = lambda self : None;
    def SetError(self, *args): return _AffyFileParser.CCELFileData_SetError(self, *args)
    def GetError(self): return _AffyFileParser.CCELFileData_GetError(self)
    def GetThisPtr(self): return _AffyFileParser.CCELFileData_GetThisPtr(self)
    def SetFileName(self, *args): return _AffyFileParser.CCELFileData_SetFileName(self, *args)
    def GetFileName(self): return _AffyFileParser.CCELFileData_GetFileName(self)
    def GetHeaderKey(self, *args): return _AffyFileParser.CCELFileData_GetHeaderKey(self, *args)
    def GetVersion(self): return _AffyFileParser.CCELFileData_GetVersion(self)
    def GetCols(self): return _AffyFileParser.CCELFileData_GetCols(self)
    def GetRows(self): return _AffyFileParser.CCELFileData_GetRows(self)
    def GetNumCells(self): return _AffyFileParser.CCELFileData_GetNumCells(self)
    def GetHeaderString(self): return _AffyFileParser.CCELFileData_GetHeaderString(self)
    def GetHeader(self): return _AffyFileParser.CCELFileData_GetHeader(self)
    def GetAlg(self): return _AffyFileParser.CCELFileData_GetAlg(self)
    def GetParams(self): return _AffyFileParser.CCELFileData_GetParams(self)
    def GetAlgorithmParameter(self, *args): return _AffyFileParser.CCELFileData_GetAlgorithmParameter(self, *args)
    def GetAlgorithmParameterTag(self, *args): return _AffyFileParser.CCELFileData_GetAlgorithmParameterTag(self, *args)
    def GetNumberAlgorithmParameters(self): return _AffyFileParser.CCELFileData_GetNumberAlgorithmParameters(self)
    def GetAlgorithmParameters(self): return _AffyFileParser.CCELFileData_GetAlgorithmParameters(self)
    def GetDatHeader(self): return _AffyFileParser.CCELFileData_GetDatHeader(self)
    def GetChipType(self): return _AffyFileParser.CCELFileData_GetChipType(self)
    def GetCellMargin(self): return _AffyFileParser.CCELFileData_GetCellMargin(self)
    def GetNumOutliers(self): return _AffyFileParser.CCELFileData_GetNumOutliers(self)
    def GetNumMasked(self): return _AffyFileParser.CCELFileData_GetNumMasked(self)
    def GetGridCorners(self): return _AffyFileParser.CCELFileData_GetGridCorners(self)
    def IndexToX(self, *args): return _AffyFileParser.CCELFileData_IndexToX(self, *args)
    def IndexToY(self, *args): return _AffyFileParser.CCELFileData_IndexToY(self, *args)
    __swig_getmethods__["XYToIndex"] = lambda x: _AffyFileParser.CCELFileData_XYToIndex
    if _newclass:XYToIndex = staticmethod(_AffyFileParser.CCELFileData_XYToIndex)
    def GetEntry(self, *args): return _AffyFileParser.CCELFileData_GetEntry(self, *args)
    def GetTranscriptomeEntry(self, *args): return _AffyFileParser.CCELFileData_GetTranscriptomeEntry(self, *args)
    def GetIntensity(self, *args): return _AffyFileParser.CCELFileData_GetIntensity(self, *args)
    def GetStdv(self, *args): return _AffyFileParser.CCELFileData_GetStdv(self, *args)
    def GetPixels(self, *args): return _AffyFileParser.CCELFileData_GetPixels(self, *args)
    def IsMasked(self, *args): return _AffyFileParser.CCELFileData_IsMasked(self, *args)
    def IsOutlier(self, *args): return _AffyFileParser.CCELFileData_IsOutlier(self, *args)
    def Close(self): return _AffyFileParser.CCELFileData_Close(self)
    def GetFileSize(self): return _AffyFileParser.CCELFileData_GetFileSize(self)
    def Exists(self): return _AffyFileParser.CCELFileData_Exists(self)
    def ReadHeader(self): return _AffyFileParser.CCELFileData_ReadHeader(self)
    def Read(self, bIncludeMaskAndOutliers=True): return _AffyFileParser.CCELFileData_Read(self, bIncludeMaskAndOutliers)
    def IsXDACompatibleFile(self): return _AffyFileParser.CCELFileData_IsXDACompatibleFile(self)
    def IsTranscriptomeBcelFile(self): return _AffyFileParser.CCELFileData_IsTranscriptomeBcelFile(self)
    def IsCompactCelFile(self): return _AffyFileParser.CCELFileData_IsCompactCelFile(self)
    def IsUnsupportedCompactCelFile(self): return _AffyFileParser.CCELFileData_IsUnsupportedCompactCelFile(self)
    def ReadEx(self, *args): return _AffyFileParser.CCELFileData_ReadEx(self, *args)
    def GetReadState(self): return _AffyFileParser.CCELFileData_GetReadState(self)
    def Clear(self): return _AffyFileParser.CCELFileData_Clear(self)
    def GetFileFormat(self): return _AffyFileParser.CCELFileData_GetFileFormat(self)
    def SetFileFormat(self, *args): return _AffyFileParser.CCELFileData_SetFileFormat(self, *args)
    def SetAlgorithmName(self, *args): return _AffyFileParser.CCELFileData_SetAlgorithmName(self, *args)
    def AddAlgorithmParameter(self, *args): return _AffyFileParser.CCELFileData_AddAlgorithmParameter(self, *args)
    def SetDimensions(self, *args): return _AffyFileParser.CCELFileData_SetDimensions(self, *args)
    def SetChipType(self, *args): return _AffyFileParser.CCELFileData_SetChipType(self, *args)
    def SetMargin(self, *args): return _AffyFileParser.CCELFileData_SetMargin(self, *args)
    def SetGridCorners(self, *args): return _AffyFileParser.CCELFileData_SetGridCorners(self, *args)
    def SetCellEntry(self, *args): return _AffyFileParser.CCELFileData_SetCellEntry(self, *args)
    def AllocateEntries(self): return _AffyFileParser.CCELFileData_AllocateEntries(self)
    def SetTranscriptomeCellEntry(self, *args): return _AffyFileParser.CCELFileData_SetTranscriptomeCellEntry(self, *args)
    def AllocateTranscriptomeEntries(self): return _AffyFileParser.CCELFileData_AllocateTranscriptomeEntries(self)
    def SetIntensity(self, *args): return _AffyFileParser.CCELFileData_SetIntensity(self, *args)
    def SetStdv(self, *args): return _AffyFileParser.CCELFileData_SetStdv(self, *args)
    def SetPixels(self, *args): return _AffyFileParser.CCELFileData_SetPixels(self, *args)
    def SetMask(self, *args): return _AffyFileParser.CCELFileData_SetMask(self, *args)
    def SetOutlier(self, *args): return _AffyFileParser.CCELFileData_SetOutlier(self, *args)
    def Munmap(self): return _AffyFileParser.CCELFileData_Munmap(self)
    def EnsureNotMmapped(self): return _AffyFileParser.CCELFileData_EnsureNotMmapped(self)
CCELFileData_swigregister = _AffyFileParser.CCELFileData_swigregister
CCELFileData_swigregister(CCELFileData)

def CCELFileData_XYToIndex(*args):
  return _AffyFileParser.CCELFileData_XYToIndex(*args)
CCELFileData_XYToIndex = _AffyFileParser.CCELFileData_XYToIndex

# This file is compatible with both classic and new-style classes.


